// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY `Serializers/TupleSerializers.tt`. DO NOT CHANGE IT.
// </auto-generated>
#nullable enable
namespace FakeExcelSerializer.Serializers
{
    public sealed class TupleExcelSerializer<T1> : IExcelSerializer<Tuple<T1>>
    {
		public void WriteTitle(ref ExcelSerializerWriter writer, Tuple<T1> value, ExcelSerializerOptions options, string name = "")
            => writer.Write(name);
        public void Serialize(ref ExcelSerializerWriter writer, Tuple<T1> value, ExcelSerializerOptions options)
        {
            if (value == null) {
                writer.WriteEmpty();
                return;
            }
            writer.EnterAndValidate();
            options.GetRequiredSerializer<T1>().Serialize(ref writer, value.Item1, options);
            writer.Exit();
        }
    }

    public sealed class ValueTupleExcelSerializer<T1> : IExcelSerializer<ValueTuple<T1>>
    {
		public void WriteTitle(ref ExcelSerializerWriter writer, ValueTuple<T1> value, ExcelSerializerOptions options, string name = "")
            => writer.Write(name);
        public void Serialize(ref ExcelSerializerWriter writer, ValueTuple<T1> value, ExcelSerializerOptions options)
        {
            writer.EnterAndValidate();
            options.GetRequiredSerializer<T1>().Serialize(ref writer, value.Item1, options);
            writer.Exit();
        }
    }

    public sealed class TupleExcelSerializer<T1, T2> : IExcelSerializer<Tuple<T1, T2>>
    {
		public void WriteTitle(ref ExcelSerializerWriter writer, Tuple<T1, T2> value, ExcelSerializerOptions options, string name = "")
            => writer.Write(name);
        public void Serialize(ref ExcelSerializerWriter writer, Tuple<T1, T2> value, ExcelSerializerOptions options)
        {
            if (value == null) {
                writer.WriteEmpty();
                return;
            }
            writer.EnterAndValidate();
            options.GetRequiredSerializer<T1>().Serialize(ref writer, value.Item1, options);
            options.GetRequiredSerializer<T2>().Serialize(ref writer, value.Item2, options);
            writer.Exit();
        }
    }

    public sealed class ValueTupleExcelSerializer<T1, T2> : IExcelSerializer<ValueTuple<T1, T2>>
    {
		public void WriteTitle(ref ExcelSerializerWriter writer, ValueTuple<T1, T2> value, ExcelSerializerOptions options, string name = "")
            => writer.Write(name);
        public void Serialize(ref ExcelSerializerWriter writer, ValueTuple<T1, T2> value, ExcelSerializerOptions options)
        {
            writer.EnterAndValidate();
            options.GetRequiredSerializer<T1>().Serialize(ref writer, value.Item1, options);
            options.GetRequiredSerializer<T2>().Serialize(ref writer, value.Item2, options);
            writer.Exit();
        }
    }

    public sealed class TupleExcelSerializer<T1, T2, T3> : IExcelSerializer<Tuple<T1, T2, T3>>
    {
		public void WriteTitle(ref ExcelSerializerWriter writer, Tuple<T1, T2, T3> value, ExcelSerializerOptions options, string name = "")
            => writer.Write(name);
        public void Serialize(ref ExcelSerializerWriter writer, Tuple<T1, T2, T3> value, ExcelSerializerOptions options)
        {
            if (value == null) {
                writer.WriteEmpty();
                return;
            }
            writer.EnterAndValidate();
            options.GetRequiredSerializer<T1>().Serialize(ref writer, value.Item1, options);
            options.GetRequiredSerializer<T2>().Serialize(ref writer, value.Item2, options);
            options.GetRequiredSerializer<T3>().Serialize(ref writer, value.Item3, options);
            writer.Exit();
        }
    }

    public sealed class ValueTupleExcelSerializer<T1, T2, T3> : IExcelSerializer<ValueTuple<T1, T2, T3>>
    {
		public void WriteTitle(ref ExcelSerializerWriter writer, ValueTuple<T1, T2, T3> value, ExcelSerializerOptions options, string name = "")
            => writer.Write(name);
        public void Serialize(ref ExcelSerializerWriter writer, ValueTuple<T1, T2, T3> value, ExcelSerializerOptions options)
        {
            writer.EnterAndValidate();
            options.GetRequiredSerializer<T1>().Serialize(ref writer, value.Item1, options);
            options.GetRequiredSerializer<T2>().Serialize(ref writer, value.Item2, options);
            options.GetRequiredSerializer<T3>().Serialize(ref writer, value.Item3, options);
            writer.Exit();
        }
    }

    public sealed class TupleExcelSerializer<T1, T2, T3, T4> : IExcelSerializer<Tuple<T1, T2, T3, T4>>
    {
		public void WriteTitle(ref ExcelSerializerWriter writer, Tuple<T1, T2, T3, T4> value, ExcelSerializerOptions options, string name = "")
            => writer.Write(name);
        public void Serialize(ref ExcelSerializerWriter writer, Tuple<T1, T2, T3, T4> value, ExcelSerializerOptions options)
        {
            if (value == null) {
                writer.WriteEmpty();
                return;
            }
            writer.EnterAndValidate();
            options.GetRequiredSerializer<T1>().Serialize(ref writer, value.Item1, options);
            options.GetRequiredSerializer<T2>().Serialize(ref writer, value.Item2, options);
            options.GetRequiredSerializer<T3>().Serialize(ref writer, value.Item3, options);
            options.GetRequiredSerializer<T4>().Serialize(ref writer, value.Item4, options);
            writer.Exit();
        }
    }

    public sealed class ValueTupleExcelSerializer<T1, T2, T3, T4> : IExcelSerializer<ValueTuple<T1, T2, T3, T4>>
    {
		public void WriteTitle(ref ExcelSerializerWriter writer, ValueTuple<T1, T2, T3, T4> value, ExcelSerializerOptions options, string name = "")
            => writer.Write(name);
        public void Serialize(ref ExcelSerializerWriter writer, ValueTuple<T1, T2, T3, T4> value, ExcelSerializerOptions options)
        {
            writer.EnterAndValidate();
            options.GetRequiredSerializer<T1>().Serialize(ref writer, value.Item1, options);
            options.GetRequiredSerializer<T2>().Serialize(ref writer, value.Item2, options);
            options.GetRequiredSerializer<T3>().Serialize(ref writer, value.Item3, options);
            options.GetRequiredSerializer<T4>().Serialize(ref writer, value.Item4, options);
            writer.Exit();
        }
    }

    public sealed class TupleExcelSerializer<T1, T2, T3, T4, T5> : IExcelSerializer<Tuple<T1, T2, T3, T4, T5>>
    {
		public void WriteTitle(ref ExcelSerializerWriter writer, Tuple<T1, T2, T3, T4, T5> value, ExcelSerializerOptions options, string name = "")
            => writer.Write(name);
        public void Serialize(ref ExcelSerializerWriter writer, Tuple<T1, T2, T3, T4, T5> value, ExcelSerializerOptions options)
        {
            if (value == null) {
                writer.WriteEmpty();
                return;
            }
            writer.EnterAndValidate();
            options.GetRequiredSerializer<T1>().Serialize(ref writer, value.Item1, options);
            options.GetRequiredSerializer<T2>().Serialize(ref writer, value.Item2, options);
            options.GetRequiredSerializer<T3>().Serialize(ref writer, value.Item3, options);
            options.GetRequiredSerializer<T4>().Serialize(ref writer, value.Item4, options);
            options.GetRequiredSerializer<T5>().Serialize(ref writer, value.Item5, options);
            writer.Exit();
        }
    }

    public sealed class ValueTupleExcelSerializer<T1, T2, T3, T4, T5> : IExcelSerializer<ValueTuple<T1, T2, T3, T4, T5>>
    {
		public void WriteTitle(ref ExcelSerializerWriter writer, ValueTuple<T1, T2, T3, T4, T5> value, ExcelSerializerOptions options, string name = "")
            => writer.Write(name);
        public void Serialize(ref ExcelSerializerWriter writer, ValueTuple<T1, T2, T3, T4, T5> value, ExcelSerializerOptions options)
        {
            writer.EnterAndValidate();
            options.GetRequiredSerializer<T1>().Serialize(ref writer, value.Item1, options);
            options.GetRequiredSerializer<T2>().Serialize(ref writer, value.Item2, options);
            options.GetRequiredSerializer<T3>().Serialize(ref writer, value.Item3, options);
            options.GetRequiredSerializer<T4>().Serialize(ref writer, value.Item4, options);
            options.GetRequiredSerializer<T5>().Serialize(ref writer, value.Item5, options);
            writer.Exit();
        }
    }

    public sealed class TupleExcelSerializer<T1, T2, T3, T4, T5, T6> : IExcelSerializer<Tuple<T1, T2, T3, T4, T5, T6>>
    {
		public void WriteTitle(ref ExcelSerializerWriter writer, Tuple<T1, T2, T3, T4, T5, T6> value, ExcelSerializerOptions options, string name = "")
            => writer.Write(name);
        public void Serialize(ref ExcelSerializerWriter writer, Tuple<T1, T2, T3, T4, T5, T6> value, ExcelSerializerOptions options)
        {
            if (value == null) {
                writer.WriteEmpty();
                return;
            }
            writer.EnterAndValidate();
            options.GetRequiredSerializer<T1>().Serialize(ref writer, value.Item1, options);
            options.GetRequiredSerializer<T2>().Serialize(ref writer, value.Item2, options);
            options.GetRequiredSerializer<T3>().Serialize(ref writer, value.Item3, options);
            options.GetRequiredSerializer<T4>().Serialize(ref writer, value.Item4, options);
            options.GetRequiredSerializer<T5>().Serialize(ref writer, value.Item5, options);
            options.GetRequiredSerializer<T6>().Serialize(ref writer, value.Item6, options);
            writer.Exit();
        }
    }

    public sealed class ValueTupleExcelSerializer<T1, T2, T3, T4, T5, T6> : IExcelSerializer<ValueTuple<T1, T2, T3, T4, T5, T6>>
    {
		public void WriteTitle(ref ExcelSerializerWriter writer, ValueTuple<T1, T2, T3, T4, T5, T6> value, ExcelSerializerOptions options, string name = "")
            => writer.Write(name);
        public void Serialize(ref ExcelSerializerWriter writer, ValueTuple<T1, T2, T3, T4, T5, T6> value, ExcelSerializerOptions options)
        {
            writer.EnterAndValidate();
            options.GetRequiredSerializer<T1>().Serialize(ref writer, value.Item1, options);
            options.GetRequiredSerializer<T2>().Serialize(ref writer, value.Item2, options);
            options.GetRequiredSerializer<T3>().Serialize(ref writer, value.Item3, options);
            options.GetRequiredSerializer<T4>().Serialize(ref writer, value.Item4, options);
            options.GetRequiredSerializer<T5>().Serialize(ref writer, value.Item5, options);
            options.GetRequiredSerializer<T6>().Serialize(ref writer, value.Item6, options);
            writer.Exit();
        }
    }

    public sealed class TupleExcelSerializer<T1, T2, T3, T4, T5, T6, T7> : IExcelSerializer<Tuple<T1, T2, T3, T4, T5, T6, T7>>
    {
		public void WriteTitle(ref ExcelSerializerWriter writer, Tuple<T1, T2, T3, T4, T5, T6, T7> value, ExcelSerializerOptions options, string name = "")
            => writer.Write(name);
        public void Serialize(ref ExcelSerializerWriter writer, Tuple<T1, T2, T3, T4, T5, T6, T7> value, ExcelSerializerOptions options)
        {
            if (value == null) {
                writer.WriteEmpty();
                return;
            }
            writer.EnterAndValidate();
            options.GetRequiredSerializer<T1>().Serialize(ref writer, value.Item1, options);
            options.GetRequiredSerializer<T2>().Serialize(ref writer, value.Item2, options);
            options.GetRequiredSerializer<T3>().Serialize(ref writer, value.Item3, options);
            options.GetRequiredSerializer<T4>().Serialize(ref writer, value.Item4, options);
            options.GetRequiredSerializer<T5>().Serialize(ref writer, value.Item5, options);
            options.GetRequiredSerializer<T6>().Serialize(ref writer, value.Item6, options);
            options.GetRequiredSerializer<T7>().Serialize(ref writer, value.Item7, options);
            writer.Exit();
        }
    }

    public sealed class ValueTupleExcelSerializer<T1, T2, T3, T4, T5, T6, T7> : IExcelSerializer<ValueTuple<T1, T2, T3, T4, T5, T6, T7>>
    {
		public void WriteTitle(ref ExcelSerializerWriter writer, ValueTuple<T1, T2, T3, T4, T5, T6, T7> value, ExcelSerializerOptions options, string name = "")
            => writer.Write(name);
        public void Serialize(ref ExcelSerializerWriter writer, ValueTuple<T1, T2, T3, T4, T5, T6, T7> value, ExcelSerializerOptions options)
        {
            writer.EnterAndValidate();
            options.GetRequiredSerializer<T1>().Serialize(ref writer, value.Item1, options);
            options.GetRequiredSerializer<T2>().Serialize(ref writer, value.Item2, options);
            options.GetRequiredSerializer<T3>().Serialize(ref writer, value.Item3, options);
            options.GetRequiredSerializer<T4>().Serialize(ref writer, value.Item4, options);
            options.GetRequiredSerializer<T5>().Serialize(ref writer, value.Item5, options);
            options.GetRequiredSerializer<T6>().Serialize(ref writer, value.Item6, options);
            options.GetRequiredSerializer<T7>().Serialize(ref writer, value.Item7, options);
            writer.Exit();
        }
    }

    public sealed class TupleExcelSerializer<T1, T2, T3, T4, T5, T6, T7, TRest> : IExcelSerializer<Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>>
        where TRest : notnull
    {
		public void WriteTitle(ref ExcelSerializerWriter writer, Tuple<T1, T2, T3, T4, T5, T6, T7, TRest> value, ExcelSerializerOptions options, string name = "")
            => writer.Write(name);
        public void Serialize(ref ExcelSerializerWriter writer, Tuple<T1, T2, T3, T4, T5, T6, T7, TRest> value, ExcelSerializerOptions options)
        {
            if (value == null) {
                writer.WriteEmpty();
                return;
            }
            writer.EnterAndValidate();
            options.GetRequiredSerializer<T1>().Serialize(ref writer, value.Item1, options);
            options.GetRequiredSerializer<T2>().Serialize(ref writer, value.Item2, options);
            options.GetRequiredSerializer<T3>().Serialize(ref writer, value.Item3, options);
            options.GetRequiredSerializer<T4>().Serialize(ref writer, value.Item4, options);
            options.GetRequiredSerializer<T5>().Serialize(ref writer, value.Item5, options);
            options.GetRequiredSerializer<T6>().Serialize(ref writer, value.Item6, options);
            options.GetRequiredSerializer<T7>().Serialize(ref writer, value.Item7, options);
            options.GetRequiredSerializer<TRest>().Serialize(ref writer, value.Rest, options);
            writer.Exit();
        }
    }

    public sealed class ValueTupleExcelSerializer<T1, T2, T3, T4, T5, T6, T7, TRest> : IExcelSerializer<ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>>
        where TRest : struct
    {
		public void WriteTitle(ref ExcelSerializerWriter writer, ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> value, ExcelSerializerOptions options, string name = "")
            => writer.Write(name);
        public void Serialize(ref ExcelSerializerWriter writer, ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> value, ExcelSerializerOptions options)
        {
            writer.EnterAndValidate();
            options.GetRequiredSerializer<T1>().Serialize(ref writer, value.Item1, options);
            options.GetRequiredSerializer<T2>().Serialize(ref writer, value.Item2, options);
            options.GetRequiredSerializer<T3>().Serialize(ref writer, value.Item3, options);
            options.GetRequiredSerializer<T4>().Serialize(ref writer, value.Item4, options);
            options.GetRequiredSerializer<T5>().Serialize(ref writer, value.Item5, options);
            options.GetRequiredSerializer<T6>().Serialize(ref writer, value.Item6, options);
            options.GetRequiredSerializer<T7>().Serialize(ref writer, value.Item7, options);
            options.GetRequiredSerializer<TRest>().Serialize(ref writer, value.Rest, options);
            writer.Exit();
        }
    }


    internal static class TupleExcelSerializer
    {
        internal static Type GetTupleExcelSerializerType(int i)
        {
            switch (i)
            {
                case 1:
                    return typeof(TupleExcelSerializer<>);
                case 2:
                    return typeof(TupleExcelSerializer<,>);
                case 3:
                    return typeof(TupleExcelSerializer<,,>);
                case 4:
                    return typeof(TupleExcelSerializer<,,,>);
                case 5:
                    return typeof(TupleExcelSerializer<,,,,>);
                case 6:
                    return typeof(TupleExcelSerializer<,,,,,>);
                case 7:
                    return typeof(TupleExcelSerializer<,,,,,,>);
                case 8:
                    return typeof(TupleExcelSerializer<,,,,,,,>);
                default:
                    break;
            }

            throw new InvalidOperationException($"TupleExcelSerializer<T1...T{i}> is not found.");
        }

        internal static Type GetValueTupleExcelSerializerType(int i)
        {
            switch (i)
            {
                case 1:
                    return typeof(ValueTupleExcelSerializer<>);
                case 2:
                    return typeof(ValueTupleExcelSerializer<,>);
                case 3:
                    return typeof(ValueTupleExcelSerializer<,,>);
                case 4:
                    return typeof(ValueTupleExcelSerializer<,,,>);
                case 5:
                    return typeof(ValueTupleExcelSerializer<,,,,>);
                case 6:
                    return typeof(ValueTupleExcelSerializer<,,,,,>);
                case 7:
                    return typeof(ValueTupleExcelSerializer<,,,,,,>);
                case 8:
                    return typeof(ValueTupleExcelSerializer<,,,,,,,>);
                default:
                    break;
            }

            throw new InvalidOperationException($"ValueTupleExcelSerializer<T1...T{i}> is not found.");
        }
    }
}