// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY `Serializers/PrimitiveSerializer.tt`. DO NOT CHANGE IT.
// </auto-generated>
#nullable enable
namespace FakeExcelSerializer.Tests
{
    public partial class PrimitiveSerializerTest 
    {
        [Fact]
        public void Serializer_Byte()
        {
            var option = ExcelSerializerOptions.Default;
            var serializer = option.GetSerializer<Byte>();
            Assert.NotNull(serializer);
            if (serializer == null) return;
            var value1 = Byte.MinValue;
            var value2 = Byte.MaxValue;
            RunNumberTest(serializer, value1, value2, option);
        }
        [Fact]
        public void Serializer_SByte()
        {
            var option = ExcelSerializerOptions.Default;
            var serializer = option.GetSerializer<SByte>();
            Assert.NotNull(serializer);
            if (serializer == null) return;
            var value1 = SByte.MinValue;
            var value2 = SByte.MaxValue;
            RunNumberTest(serializer, value1, value2, option);
        }
        [Fact]
        public void Serializer_Decimal()
        {
            var option = ExcelSerializerOptions.Default;
            var serializer = option.GetSerializer<Decimal>();
            Assert.NotNull(serializer);
            if (serializer == null) return;
            var value1 = Decimal.MinValue;
            var value2 = Decimal.MaxValue;
            RunNumberTest(serializer, value1, value2, option);
        }
        [Fact]
        public void Serializer_Double()
        {
            var option = ExcelSerializerOptions.Default;
            var serializer = option.GetSerializer<Double>();
            Assert.NotNull(serializer);
            if (serializer == null) return;
            var value1 = Double.MinValue;
            var value2 = Double.MaxValue;
            RunNumberTest(serializer, value1, value2, option);
        }
        [Fact]
        public void Serializer_Single()
        {
            var option = ExcelSerializerOptions.Default;
            var serializer = option.GetSerializer<Single>();
            Assert.NotNull(serializer);
            if (serializer == null) return;
            var value1 = Single.MinValue;
            var value2 = Single.MaxValue;
            RunNumberTest(serializer, value1, value2, option);
        }
        [Fact]
        public void Serializer_Int32()
        {
            var option = ExcelSerializerOptions.Default;
            var serializer = option.GetSerializer<Int32>();
            Assert.NotNull(serializer);
            if (serializer == null) return;
            var value1 = Int32.MinValue;
            var value2 = Int32.MaxValue;
            RunNumberTest(serializer, value1, value2, option);
        }
        [Fact]
        public void Serializer_UInt32()
        {
            var option = ExcelSerializerOptions.Default;
            var serializer = option.GetSerializer<UInt32>();
            Assert.NotNull(serializer);
            if (serializer == null) return;
            var value1 = UInt32.MinValue;
            var value2 = UInt32.MaxValue;
            RunNumberTest(serializer, value1, value2, option);
        }
        [Fact]
        public void Serializer_Int64()
        {
            var option = ExcelSerializerOptions.Default;
            var serializer = option.GetSerializer<Int64>();
            Assert.NotNull(serializer);
            if (serializer == null) return;
            var value1 = Int64.MinValue;
            var value2 = Int64.MaxValue;
            RunNumberTest(serializer, value1, value2, option);
        }
        [Fact]
        public void Serializer_UInt64()
        {
            var option = ExcelSerializerOptions.Default;
            var serializer = option.GetSerializer<UInt64>();
            Assert.NotNull(serializer);
            if (serializer == null) return;
            var value1 = UInt64.MinValue;
            var value2 = UInt64.MaxValue;
            RunNumberTest(serializer, value1, value2, option);
        }
        [Fact]
        public void Serializer_Int16()
        {
            var option = ExcelSerializerOptions.Default;
            var serializer = option.GetSerializer<Int16>();
            Assert.NotNull(serializer);
            if (serializer == null) return;
            var value1 = Int16.MinValue;
            var value2 = Int16.MaxValue;
            RunNumberTest(serializer, value1, value2, option);
        }
        [Fact]
        public void Serializer_UInt16()
        {
            var option = ExcelSerializerOptions.Default;
            var serializer = option.GetSerializer<UInt16>();
            Assert.NotNull(serializer);
            if (serializer == null) return;
            var value1 = UInt16.MinValue;
            var value2 = UInt16.MaxValue;
            RunNumberTest(serializer, value1, value2, option);
        }
    }
}